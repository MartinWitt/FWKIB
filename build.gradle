plugins {
    id 'java'
    id 'application'
    id "org.ajoberstar.grgit" version "1.7.2"
    id "com.github.spotbugs" version "3.0.0"
    id "net.ltgt.errorprone" version "1.1.1"

    
}
tasks.distZip.enabled = false
tasks.distTar.enabled = false

//sourceSets {
//        main {
//                java {
//                        srcDirs= ["src/main/java"]
//                }
//                resources {
//                        srcDirs= ["src/main/resources"]
//                }
//        }
//}
spotbugs {
    effort = "max"
    reportLevel = "low"
    reportsDir = file("$project.buildDir/findbugsReports")
    ignoreFailures = "true"

}
tasks.withType(com.github.spotbugs.SpotBugsTask) {
reports {
    html.enabled true
    xml.enabled false
    }
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile).configureEach {
    options.errorprone.disableWarningsInGeneratedCode = true
    options.errorprone.allErrorsAsWarnings = true
}


sourceCompatibility = 11
targetCompatibility = 11
dependencies {
    errorprone("com.google.errorprone:error_prone_core:+")

    testImplementation 'junit:junit:4.12'
    //implementation 'org.mongodb:mongodb-driver-async:3.8.2'
    implementation 'org.mongodb:mongo-java-driver:+'
    implementation name:"KeksIRC",version: "+"
    implementation name:"SpamClassifier",version: "+"
    implementation name:"KeywordExtraction",version:"+"
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'

    implementation 'com.google.guava:guava:+'
    // https://mvnrepository.com/artifact/org.pircbotx/pircbotx
    //compile group: 'org.pircbotx', name: 'pircbotx', version: '2.0.1'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.60'
    implementation group: 'commons-io', name: 'commons-io', version: '2.4'
    implementation group: 'org.json', name: 'json', version: '20180813'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '+'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.6'
    //compile "org.deeplearning4j:deeplearning4j-core:1.0.0-beta5"
    //compile "org.nd4j:nd4j-native-platform:1.0.0-beta5"
    //compile group: 'org.deeplearning4j', name: 'deeplearning4j-nlp-uima', version: '1.0.0-beta5'
    implementation group: 'edu.stanford.nlp', name: 'stanford-corenlp', version: '+'
    implementation 'edu.stanford.nlp:stanford-corenlp:+:models'
    implementation "org.nibor.autolink:autolink:+"
    implementation 'org.jsoup:jsoup:1.11.3'



}
//https://stackoverflow.com/questions/27337268/how-to-use-heideltime-temporal-tagger-inside-a-java-project einbauen


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    flatDir {
        dirs 'libs'
    }
    
}
import java.text.SimpleDateFormat
import org.ajoberstar.grgit.Grgit

version = 0.11

task versionTxt()  {
    doLast {
        new File("$projectDir/src/main/resources", "version").text = """
Version: $version
Revision: ${grgit.head().abbreviatedId}
Buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
Application-name: ${project.name}"""
    }
}
task copySrc()  {
    copy{ from"$projectDir/src/main/java/" into ("$projectDir/src/main/resources/srcFiles")
    }
}

build{
    dependsOn versionTxt
    dependsOn copySrc
    doLast{
        cleanSrc
    }
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs = [
    '-Xlint:all',
    //'-Werror'
  ]
}
task cleanSrc {
    file("$projectDir/src/main/resources/srcFiles").deleteDir()
}

mainClassName = 'keksdose.fwkib.Main'
jar {
    manifest {
        attributes 'Main-Class' : 'keksdose.fwkib.Main'
    }
    doFirst {
        //from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
        from "src/main/resources"
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 

}

